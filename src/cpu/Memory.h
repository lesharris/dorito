#pragma once

#include <cstdint>

#include <deque>
#include <vector>
#include <string>

namespace dorito {

  class Memory {
  public:
    Memory();

    void Reset();

    void LoadRom(const std::string &path);

    void LoadRom(const char *rom);

    void Push(uint16_t addr);

    uint16_t Pop();

    void Write(uint16_t addr, uint8_t data);

    void WriteAudio(uint8_t position, uint8_t data);

    uint8_t Read(uint16_t addr);

    uint16_t CharacterAddress(uint8_t character);

    uint16_t BigCharacterAddress(uint8_t character);

    [[nodiscard]] uint16_t RomSize() const { return m_RomSize; }

    [[nodiscard]] const std::vector<uint8_t> GetAudioBuffer() const {
      return m_UseBeep ? m_BeepBuffer : m_AudioBuffer;
    }

    void UseBeep(bool use) {
      m_UseBeep = use;
    }

    std::deque<uint16_t> &GetStack() {
      return m_Stack;
    }

    std::vector<uint8_t> &GetMemory() {
      return m_Ram;
    }

    std::vector<uint8_t> &GetAudioBuffer() {
      return m_AudioBuffer;
    }
    
  private:
    void LoadFont();

  private:
    static constexpr uint16_t m_MemorySize = 0xFFFF;

  private:
    friend class UI;

  private:
    std::vector<uint8_t> m_StandardFont{
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };

    std::vector<uint8_t> m_BigFont = {
        0x7C, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7C, 0x00, // 0
        0x08, 0x18, 0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3C, 0x00, // 1
        0x7C, 0x82, 0x02, 0x02, 0x04, 0x18, 0x20, 0x40, 0xFE, 0x00, // 2
        0x7C, 0x82, 0x02, 0x02, 0x3C, 0x02, 0x02, 0x82, 0x7C, 0x00, // 3
        0x84, 0x84, 0x84, 0x84, 0xFE, 0x04, 0x04, 0x04, 0x04, 0x00, // 4
        0xFE, 0x80, 0x80, 0x80, 0xFC, 0x02, 0x02, 0x82, 0x7C, 0x00, // 5
        0x7C, 0x82, 0x80, 0x80, 0xFC, 0x82, 0x82, 0x82, 0x7C, 0x00, // 6
        0xFE, 0x02, 0x04, 0x08, 0x10, 0x20, 0x20, 0x20, 0x20, 0x00, // 7
        0x7C, 0x82, 0x82, 0x82, 0x7C, 0x82, 0x82, 0x82, 0x7C, 0x00, // 8
        0x7C, 0x82, 0x82, 0x82, 0x7E, 0x02, 0x02, 0x82, 0x7C, 0x00, // 9
        0x10, 0x28, 0x44, 0x82, 0x82, 0xFE, 0x82, 0x82, 0x82, 0x00, // A
        0xFC, 0x82, 0x82, 0x82, 0xFC, 0x82, 0x82, 0x82, 0xFC, 0x00, // B
        0x7C, 0x82, 0x80, 0x80, 0x80, 0x80, 0x80, 0x82, 0x7C, 0x00, // C
        0xFC, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0xFC, 0x00, // D
        0xFE, 0x80, 0x80, 0x80, 0xF8, 0x80, 0x80, 0x80, 0xFE, 0x00, // E
        0xFE, 0x80, 0x80, 0x80, 0xF8, 0x80, 0x80, 0x80, 0x80, 0x00, // F
    };

    std::vector<uint8_t> m_BeepBuffer{
        0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
        0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00
    };

    std::vector<uint8_t> m_Ram = std::vector<uint8_t>(m_MemorySize);
    std::vector<uint8_t> m_AudioBuffer = std::vector<uint8_t>(16);
    std::deque<uint16_t> m_Stack;

    uint16_t m_RomSize = 0;

    bool m_UseBeep = true;
  };

} // dorito

